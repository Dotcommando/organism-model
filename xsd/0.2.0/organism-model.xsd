<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        targetNamespace="https://dotcommando.github.io/organism-model/xsd/0.2.0/organism-model.xsd"
        xmlns="https://dotcommando.github.io/organism-model/xsd/0.2.0/organism-model.xsd"
        elementFormDefault="qualified"
        attributeFormDefault="unqualified">

    <!--
      Organism Model XML (OMX) version 0.2.0
      Namespace: https://dotcommando.github.io/organism-model/xsd/0.2.0/organism-model.xsd
      Repository: https://github.com/Dotcommando/organism-model

      This schema describes a structure for modeling organisms, their systems, organs,
      cells, organelles, resources, processes, cycles, signals, actions, and optionally
      internal state variables for advanced behaviors (e.g., counting cell divisions).
      Genes and genetics are out of scope.

      ### New in Version 0.2.0
      - **Multiple Organisms**: You can now describe more than one organism within the same OMXML file,
        enabling complex interactions such as pregnancy, parasitism, or multi-organism ecosystems.
      - **OrganismType**: A top-level type that allows an organism to function without any Systems (standalone),
        or optionally include Systems for more complex structures.
      - **Birth, Division, and Parasitism**: Enhanced process definitions enable the explicit modeling of
        new organism creation (birth), asexual division (splitting one organism into two), and parasitic
        relationships where one organism depends on another for resources.
      - **organismSpawns**: A dedicated mechanism in processes for spawning new organisms, eliminating
        the need to treat them as simple resources.

      ### Available Entities and Relationships
      - **Organism**: A top-level living entity that can directly handle resource flows, signals, actions,
        and lifecycle stages, with or without Systems.
      - **System**: Subcomponents of an organism responsible for specific functions (e.g., digestive, nervous).
      - **Organ**: Building blocks of systems, where each organ can define its own processes, cycles, or resource flows.
      - **Cell**: The fundamental unit of life, described here similarly to an Organ for modeling convenience.
      - **Organelle**: Substructures within cells that carry out specialized functions.

      Each entity (Organism, System, Organ, Cell, Organelle) is uniquely identified by an `id` and belongs
      to a hierarchical layer specified by `LayerEnumType`. Entities can cross-reference each other
      across layers (e.g., triggers, resource transfers, signals).

      ### Internal State and Lifecycle
      - **Internal State Variables**: Provide a way to track counters or flags (e.g., divisionCount, parasiteLoad).
      - **Lifecycle Stages**: Define an entityâ€™s different life phases, each potentially having unique compositions,
        resource flows, or processes.

      ### Processes and Cycles
      - **Processes**: Model events or actions that consume and produce resources, manipulate internal state,
        or spawn new organisms based on triggers.
      - **Cycles**: Automate and repeat processes, controlling their interval and conditions.

      ### Signals and Actions
      - **Signals**: Represent internal or external communication (e.g., odor, color change, radio waves).
      - **Actions**: Outward behaviors (move, attack, reproduce) that can reference any entities involved.

      ### Summary
      With version 0.2.0, OMXML expands its flexibility to model multi-organism interactions (birth, division, parasitism),
      more detailed lifecycle stages, and standalone organism functionalities. This enables users to simulate a wide range
      of biological phenomena, from simple single-celled divisions to complex host-parasite dynamics, all while retaining
      a consistent layer-based approach to resource and process modeling.
    -->

    <!-- ********** Simple Types ********** -->
    <xs:simpleType name="ResourceTypeEnum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="simple"/>
            <xs:enumeration value="complex"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="TimestampType">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="LogicalOperatorType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="and"/>
            <xs:enumeration value="or"/>
            <xs:enumeration value="not"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="SystemTypeEnum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="respiratory"/>
            <xs:enumeration value="transport"/>
            <xs:enumeration value="nervous"/>
            <xs:enumeration value="digestive"/>
            <xs:enumeration value="excretory"/>
            <xs:enumeration value="sensory"/>
            <xs:enumeration value="musculoskeletal"/>
            <xs:enumeration value="endocrine"/>
            <xs:enumeration value="reproductive"/>
            <xs:enumeration value="other"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ModeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="active"/>
            <xs:enumeration value="inactive"/>
            <xs:enumeration value="resting"/>
            <xs:enumeration value="maintenance"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="OverflowBehaviorType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="discard"/>
            <xs:enumeration value="passthrough"/>
            <xs:enumeration value="convert"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Layers enumeration. Used to indicate which layer an entity belongs to. -->
    <xs:simpleType name="LayerEnumType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="organism"/>
            <xs:enumeration value="system"/>
            <xs:enumeration value="organ"/>
            <xs:enumeration value="cell"/>
            <xs:enumeration value="organelle"/>
        </xs:restriction>
    </xs:simpleType>

    <!--
      IntervalUnitsType to restrict interval units similar to moment.js.
    -->
    <xs:simpleType name="IntervalUnitsType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ms"/>
            <xs:enumeration value="s"/>
            <xs:enumeration value="m"/>
            <xs:enumeration value="h"/>
            <xs:enumeration value="d"/>
            <xs:enumeration value="M"/>
            <xs:enumeration value="Y"/>
            <xs:enumeration value="C"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- ********** Complex Types ********** -->
    <xs:complexType name="ParentRefType">
        <xs:attribute name="id" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="SexRefType">
        <xs:attribute name="id" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="MetadataType">
        <xs:sequence>
            <xs:element name="species" type="xs:string"/>
            <xs:element name="id" type="xs:string"/>
            <xs:element name="parents" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parent" type="ParentRefType" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="birthTimestamp" type="TimestampType"/>
            <xs:element name="sexRef" type="SexRefType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ComponentResourceType">
        <xs:attribute name="resourceName" type="xs:string" use="required"/>
        <xs:attribute name="amount" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="ComplexResourceComponentsType">
        <xs:sequence>
            <xs:element name="component" type="ComponentResourceType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ResourceDefType">
        <xs:sequence>
            <xs:element name="components" type="ComplexResourceComponentsType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="type" type="ResourceTypeEnum" use="required"/>
    </xs:complexType>

    <xs:complexType name="ResourcesType">
        <xs:sequence>
            <xs:element name="resource" type="ResourceDefType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ResourceConditionType">
        <xs:attribute name="resourceName" type="xs:string" use="required"/>
        <xs:attribute name="minAmount" type="xs:double" use="optional"/>
        <xs:attribute name="maxAmount" type="xs:double" use="optional"/>
    </xs:complexType>

    <xs:complexType name="EntityStateConditionType">
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="layer" type="LayerEnumType" use="required"/>
        <xs:attribute name="alive" type="xs:boolean" use="optional"/>
        <xs:attribute name="healthy" type="xs:boolean" use="optional"/>
    </xs:complexType>

    <xs:complexType name="StateConditionType">
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="minValue" type="xs:double" use="optional"/>
        <xs:attribute name="maxValue" type="xs:double" use="optional"/>
    </xs:complexType>

    <xs:complexType name="SensoryConditionType">
        <xs:attribute name="species" type="xs:string" use="required"/>
        <xs:attribute name="proximity" type="xs:double" use="optional"/>
        <xs:attribute name="presence" type="xs:boolean" use="optional" default="true"/>
        <xs:attribute name="requiredAccuracy" type="xs:double" use="optional" default="1.0"/>
        <xs:attribute name="requiredRange" type="xs:double" use="optional" default="10.0"/>
    </xs:complexType>

    <xs:complexType name="ConditionLogicType">
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="resourceCondition" type="ResourceConditionType"/>
                <xs:element name="entityStateCondition" type="EntityStateConditionType"/>
                <xs:element name="sensoryCondition" type="SensoryConditionType"/>
                <xs:element name="stateCondition" type="StateConditionType"/>
                <xs:element name="logic" type="ConditionLogicType"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="operator" type="LogicalOperatorType" use="optional"/>
    </xs:complexType>

    <xs:complexType name="TriggerType">
        <xs:sequence>
            <xs:element name="conditions" type="ConditionLogicType" minOccurs="0"/>
            <xs:element name="externalFactor" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="factorName" type="xs:string" use="required"/>
                    <xs:attribute name="minValue" type="xs:double" use="optional"/>
                    <xs:attribute name="maxValue" type="xs:double" use="optional"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="StorageType">
        <xs:sequence>
            <xs:element name="storedResource" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="resourceName" type="xs:string" use="required"/>
                    <xs:attribute name="maxCapacity" type="xs:double" use="required"/>
                    <xs:attribute name="accumulationRate" type="xs:double" use="optional"/>
                    <xs:attribute name="overflowBehavior" type="OverflowBehaviorType" use="optional" default="discard"/>
                    <xs:attribute name="overflowTargetResource" type="xs:string" use="optional"/>
                    <xs:attribute name="overflowTargetId" type="xs:string" use="optional"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Sensory Capabilities for the Sensory System -->
    <xs:complexType name="SensoryCapabilitiesType">
        <xs:attribute name="maxRange" type="xs:double" use="optional" default="10.0"/>
        <xs:attribute name="accuracy" type="xs:double" use="optional" default="1.0"/>
    </xs:complexType>

    <xs:complexType name="ResourceFlowsType">
        <xs:sequence>
            <xs:element name="inputs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="input" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="resourceName" type="xs:string" use="required"/>
                                <xs:attribute name="amount" type="xs:double" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="consumption" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="consume" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="resourceName" type="xs:string" use="required"/>
                                <xs:attribute name="amount" type="xs:double" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="receiveFrom" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="receive" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="resourceName" type="xs:string" use="required"/>
                                <xs:attribute name="amount" type="xs:double" use="required"/>
                                <xs:attribute name="sourceId" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="transferTo" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="transfer" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="resourceName" type="xs:string" use="required"/>
                                <xs:attribute name="amount" type="xs:double" use="required"/>
                                <xs:attribute name="targetId" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="outputs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="output" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="resourceName" type="xs:string" use="required"/>
                                <xs:attribute name="amount" type="xs:double" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="storage" type="StorageType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CompositionType">
        <xs:sequence>
            <xs:element name="component" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="resourceName" type="xs:string" use="required"/>
                    <xs:attribute name="amount" type="xs:double" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!--
      LifecycleStagesType for storing multiple "stages" of an entity's growth or transformation.
      Each stage can have its own composition, resourceFlows, processes, and cycles.
    -->
    <xs:complexType name="LifecycleStagesType">
        <xs:sequence>
            <xs:element name="stage" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="description" type="xs:string" minOccurs="0"/>
                        <xs:element name="composition" type="CompositionType" minOccurs="0"/>
                        <xs:element name="resourceFlows" type="ResourceFlowsType" minOccurs="0"/>
                        <xs:element name="Processes" type="ProcessesType" minOccurs="0"/>
                        <xs:element name="Cycles" type="CyclesType" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="id" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SystemType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="organs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="organRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="penetration" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="systemRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                                <xs:attribute name="level" type="xs:string" use="optional"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="sexes" type="SexesType" minOccurs="0"/>
            <xs:element name="resourceFlows" type="ResourceFlowsType" minOccurs="0"/>
            <xs:element name="sensoryCapabilities" type="SensoryCapabilitiesType" minOccurs="0"/>
            <xs:element name="composition" type="CompositionType" minOccurs="0"/>
            <xs:element name="lifecycleStages" type="LifecycleStagesType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="type" type="SystemTypeEnum" use="required"/>
        <xs:attribute name="mode" type="ModeType" use="optional" default="active"/>
        <xs:attribute name="initialMode" type="ModeType" use="optional" default="active"/>
    </xs:complexType>

    <xs:complexType name="OrgansType">
        <xs:sequence>
            <xs:element name="organ" maxOccurs="unbounded" type="OrganType"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="OrganType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="linkedProcesses" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="processRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="linkedCycles" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="cycleRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="resourceFlows" type="ResourceFlowsType" minOccurs="0"/>
            <xs:element name="composition" type="CompositionType" minOccurs="0"/>
            <xs:element name="lifecycleStages" type="LifecycleStagesType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="name" type="xs:string" use="optional"/>
        <xs:attribute name="mode" type="ModeType" use="optional" default="active"/>
        <xs:attribute name="initialMode" type="ModeType" use="optional" default="active"/>
    </xs:complexType>

    <!--
      *** OrganismType ***
      A top-level entity that can function by itself (no Systems needed).
      If <systems> is present, the organism delegates some functionality to them.
      Otherwise, the organism handles everything by itself.
    -->
    <xs:complexType name="OrganismType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>

            <!-- Optional: The organism can define internal resource flows. -->
            <xs:element name="resourceFlows" type="ResourceFlowsType" minOccurs="0"/>

            <!-- Optional: The organism can define or reference sub-systems. -->
            <xs:element name="systems" type="SystemsType" minOccurs="0"/>

            <!-- The organism may have sensory capabilities if it receives signals directly. -->
            <xs:element name="sensoryCapabilities" type="SensoryCapabilitiesType" minOccurs="0"/>

            <!-- The organism can define signals and actions if no systems exist, or to handle organism-level I/O. -->
            <xs:element name="signals" type="SignalsType" minOccurs="0"/>
            <xs:element name="actions" type="ActionsType" minOccurs="0"/>

            <!-- The organismâ€™s composition (mass/molecules). -->
            <xs:element name="composition" type="CompositionType" minOccurs="0"/>

            <!-- Lifecycle stages: if the organism changes composition or behavior over time. -->
            <xs:element name="lifecycleStages" type="LifecycleStagesType" minOccurs="0"/>

            <!-- Internal state for top-level counters, e.g., "divisionCount", "pregnancyTime", etc. -->
            <xs:element name="internalState" type="InternalStateType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <!-- e.g., "human", "algae", "parasite", etc. This is optional. -->
        <xs:attribute name="species" type="xs:string" use="optional"/>
        <xs:attribute name="mode" type="ModeType" use="optional" default="active"/>
        <xs:attribute name="initialMode" type="ModeType" use="optional" default="active"/>
    </xs:complexType>

    <!-- Container for multiple organisms in one document. -->
    <xs:complexType name="OrganismsType">
        <xs:sequence>
            <xs:element name="organism" type="OrganismType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SexType">
        <xs:sequence>
            <xs:element name="sexualOrganRef" type="ParentRefType" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="SexesType">
        <xs:sequence>
            <xs:element name="sex" type="SexType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SystemsType">
        <xs:sequence>
            <xs:element name="system" type="SystemType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Generic reference to any layer entity. -->
    <xs:complexType name="EntityRefType">
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="layer" type="LayerEnumType" use="required"/>
    </xs:complexType>

    <xs:complexType name="EntitiesInvolvedType">
        <xs:sequence>
            <xs:element name="entityRef" type="EntityRefType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ResourceIOType">
        <xs:sequence>
            <xs:element name="input" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="resourceName" type="xs:string" use="required"/>
                    <xs:attribute name="amount" type="xs:double" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="output" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="resourceName" type="xs:string" use="required"/>
                    <xs:attribute name="amount" type="xs:double" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!--
      *** organismSpawns in ProcessType ***
      Allows this process to spawn new organisms (like birth, budding, or parasite creation).
    -->
    <xs:complexType name="OrganismSpawnType">
        <xs:attribute name="species" type="xs:string" use="required"/>
        <!-- e.g., how many new organisms to spawn; default=1 if omitted. -->
        <xs:attribute name="count" type="xs:integer" use="optional" default="1"/>
    </xs:complexType>

    <xs:complexType name="OrganismSpawnsType">
        <xs:sequence>
            <xs:element name="spawn" type="OrganismSpawnType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Signals: used for internal or external communication (odor, color, sound, radio, etc.). -->
    <xs:complexType name="SignalType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="characteristics" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="property" maxOccurs="unbounded" minOccurs="0">
                            <xs:complexType>
                                <xs:attribute name="name" type="xs:string" use="required"/>
                                <xs:attribute name="value" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="signalType" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="SignalsType">
        <xs:sequence>
            <xs:element name="Signal" type="SignalType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Actions: outward or environmental interactions (move, attack, eat, reproduce, etc.). -->
    <xs:complexType name="ActionType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="entitiesInvolved" type="EntitiesInvolvedType" minOccurs="0"/>
            <xs:element name="trigger" type="TriggerType" minOccurs="0"/>
            <xs:element name="resourceIO" type="ResourceIOType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="name" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="ActionsType">
        <xs:sequence>
            <xs:element name="Action" type="ActionType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Allows "internalState" on any entity. -->
    <xs:complexType name="InternalStateType">
        <xs:sequence>
            <xs:element name="stateVariable" maxOccurs="unbounded" minOccurs="0">
                <xs:complexType>
                    <xs:attribute name="name" type="xs:string" use="required"/>
                    <xs:attribute name="value" type="xs:double" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Allows processes to modify internal state variables via "stateChanges". -->
    <xs:complexType name="StateChangeType">
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="operation" type="xs:string" use="required"/>
        <xs:attribute name="operand" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="StateChangesType">
        <xs:sequence>
            <xs:element name="stateChange" type="StateChangeType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!--
      *** Extended ProcessType ***
      Adds an optional <organismSpawns> to let the process declare new organisms.
    -->
    <xs:complexType name="ProcessType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="trigger" type="TriggerType" minOccurs="0"/>
            <xs:element name="entitiesInvolved" type="EntitiesInvolvedType" minOccurs="0"/>
            <xs:element name="resourceIO" type="ResourceIOType" minOccurs="0"/>
            <xs:element name="duration" minOccurs="0">
                <xs:complexType>
                    <xs:attribute name="timeUnits" type="IntervalUnitsType" use="optional" default="d"/>
                    <xs:attribute name="value" type="xs:double" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="repetition" minOccurs="0">
                <xs:complexType>
                    <xs:attribute name="repeat" type="xs:boolean" use="optional" default="false"/>
                    <xs:attribute name="interval" type="xs:double" use="optional"/>
                    <xs:attribute name="intervalUnits" type="IntervalUnitsType" use="optional" default="d"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="signalRefs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="signalRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="actionRefs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="actionRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="stateChanges" type="StateChangesType" minOccurs="0"/>

            <!-- *** Optional spawns of new organisms. -->
            <xs:element name="organismSpawns" type="OrganismSpawnsType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="ProcessesType">
        <xs:sequence>
            <xs:element name="process" type="ProcessType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CycleType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="trigger" type="TriggerType" minOccurs="0"/>
            <xs:element name="entitiesInvolved" type="EntitiesInvolvedType" minOccurs="0"/>
            <xs:element name="processRefs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="processRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="repetition" minOccurs="0">
                <xs:complexType>
                    <xs:attribute name="repeat" type="xs:boolean" use="optional" default="true"/>
                    <xs:attribute name="interval" type="xs:double" use="optional"/>
                    <xs:attribute name="intervalUnits" type="IntervalUnitsType" use="optional" default="d"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="signalRefs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="signalRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="actionRefs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="actionRef" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="id" type="xs:string" use="required"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="CyclesType">
        <xs:sequence>
            <xs:element name="cycle" type="CycleType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Root element -->
    <xs:element name="OrganismModel">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="metadata" type="MetadataType"/>
                <xs:element name="Resources" type="ResourcesType" minOccurs="0"/>
                <xs:element name="resourceFlows" type="ResourceFlowsType" minOccurs="0"/>

                <xs:element name="Systems" type="SystemsType" minOccurs="0"/>
                <xs:element name="Organs" type="OrgansType" minOccurs="0"/>
                <xs:element name="Cells" type="OrgansType" minOccurs="0"/>
                <xs:element name="Organelles" type="OrgansType" minOccurs="0"/>

                <xs:element name="Organisms" type="OrganismsType" minOccurs="0"/>

                <xs:element name="Processes" type="ProcessesType" minOccurs="0"/>
                <xs:element name="Cycles" type="CyclesType" minOccurs="0"/>
                <xs:element name="Signals" type="SignalsType" minOccurs="0"/>
                <xs:element name="Actions" type="ActionsType" minOccurs="0"/>
                <xs:element name="internalState" type="InternalStateType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="version" type="xs:string" use="required" fixed="0.2.0"/>
        </xs:complexType>
    </xs:element>

</xs:schema>
